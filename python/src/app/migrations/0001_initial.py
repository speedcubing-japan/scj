# Generated by Django 2.2.24 on 2021-06-20 05:37

import app.models.user
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_mysql.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', app.models.user.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AverageRank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.SmallIntegerField(choices=[(1, '3x3x3 キューブ'), (2, '2x2x2 キューブ'), (3, '4x4x4 キューブ'), (4, '5x5x5 キューブ'), (5, '6x6x6 キューブ'), (6, '7x7x7 キューブ'), (7, '3x3x3 目隠し'), (8, '3x3x3 最少手数'), (9, '3x3x3 片手'), (10, 'クロック'), (11, 'メガミンクス'), (12, 'ピラミンクス'), (13, 'スキューブ'), (14, 'スクエア1'), (15, '4x4x4 目隠し'), (16, '5x5x5 目隠し'), (17, '3x3x3 複数目隠し')], verbose_name='イベントID')),
                ('competition_id', models.IntegerField(verbose_name='大会ID')),
                ('competition_name_id', models.CharField(default='', max_length=64, verbose_name='大会名ID')),
                ('competition_name', models.CharField(default='', max_length=64, verbose_name='大会名')),
                ('year', models.SmallIntegerField(default=0, verbose_name='年')),
                ('best', models.FloatField(verbose_name='ベスト')),
                ('value1', models.FloatField(default=0, verbose_name='値1')),
                ('value2', models.FloatField(default=0, verbose_name='値2')),
                ('value3', models.FloatField(default=0, verbose_name='値3')),
                ('value4', models.FloatField(default=0, verbose_name='値4')),
                ('value5', models.FloatField(default=0, verbose_name='値5')),
                ('gender', models.SmallIntegerField(choices=[(1, '男性'), (2, '女性')], default=0, verbose_name='性別')),
                ('generation', models.SmallIntegerField(default=0, verbose_name='世代')),
                ('prefecture_id', models.SmallIntegerField(choices=[(1, '北海道'), (2, '青森県'), (3, '岩手県'), (4, '宮城県'), (5, '秋田県'), (6, '山形県'), (7, '福島県'), (8, '茨城県'), (9, '栃木県'), (10, '群馬県'), (11, '埼玉県'), (12, '千葉県'), (13, '東京都'), (14, '神奈川県'), (15, '新潟県'), (16, '富山県'), (17, '石川県'), (18, '福井県'), (19, '山梨県'), (20, '長野県'), (21, '岐阜県'), (22, '静岡県'), (23, '愛知県'), (24, '三重県'), (25, '滋賀県'), (26, '京都府'), (27, '大阪府'), (28, '兵庫県'), (29, '奈良県'), (30, '和歌山県'), (31, '鳥取県'), (32, '島根県'), (33, '岡山県'), (34, '広島県'), (35, '山口県'), (36, '徳島県'), (37, '香川県'), (38, '愛媛県'), (39, '高知県'), (40, '福岡県'), (41, '佐賀県'), (42, '長崎県'), (43, '熊本県'), (44, '大分県'), (45, '宮崎県'), (46, '鹿児島'), (47, '沖縄県'), (48, '海外')], default=0, verbose_name='都道府県ID')),
                ('rank', models.IntegerField(default=0, verbose_name='ランク')),
                ('gender_rank', models.IntegerField(default=0, verbose_name='性別ランク')),
                ('generation_rank', models.IntegerField(default=0, verbose_name='世代ランク')),
                ('prefecture_rank', models.IntegerField(default=0, verbose_name='県ランク')),
            ],
        ),
        migrations.CreateModel(
            name='BestRank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.SmallIntegerField(choices=[(1, '3x3x3 キューブ'), (2, '2x2x2 キューブ'), (3, '4x4x4 キューブ'), (4, '5x5x5 キューブ'), (5, '6x6x6 キューブ'), (6, '7x7x7 キューブ'), (7, '3x3x3 目隠し'), (8, '3x3x3 最少手数'), (9, '3x3x3 片手'), (10, 'クロック'), (11, 'メガミンクス'), (12, 'ピラミンクス'), (13, 'スキューブ'), (14, 'スクエア1'), (15, '4x4x4 目隠し'), (16, '5x5x5 目隠し'), (17, '3x3x3 複数目隠し')], verbose_name='イベントID')),
                ('competition_id', models.IntegerField(verbose_name='大会ID')),
                ('competition_name_id', models.CharField(default='', max_length=64, verbose_name='大会名ID')),
                ('competition_name', models.CharField(default='', max_length=64, verbose_name='大会名')),
                ('year', models.SmallIntegerField(default=0, verbose_name='年')),
                ('best', models.FloatField(verbose_name='ベスト')),
                ('gender', models.SmallIntegerField(choices=[(1, '男性'), (2, '女性')], default=0, verbose_name='性別')),
                ('generation', models.SmallIntegerField(default=0, verbose_name='世代')),
                ('prefecture_id', models.SmallIntegerField(choices=[(1, '北海道'), (2, '青森県'), (3, '岩手県'), (4, '宮城県'), (5, '秋田県'), (6, '山形県'), (7, '福島県'), (8, '茨城県'), (9, '栃木県'), (10, '群馬県'), (11, '埼玉県'), (12, '千葉県'), (13, '東京都'), (14, '神奈川県'), (15, '新潟県'), (16, '富山県'), (17, '石川県'), (18, '福井県'), (19, '山梨県'), (20, '長野県'), (21, '岐阜県'), (22, '静岡県'), (23, '愛知県'), (24, '三重県'), (25, '滋賀県'), (26, '京都府'), (27, '大阪府'), (28, '兵庫県'), (29, '奈良県'), (30, '和歌山県'), (31, '鳥取県'), (32, '島根県'), (33, '岡山県'), (34, '広島県'), (35, '山口県'), (36, '徳島県'), (37, '香川県'), (38, '愛媛県'), (39, '高知県'), (40, '福岡県'), (41, '佐賀県'), (42, '長崎県'), (43, '熊本県'), (44, '大分県'), (45, '宮崎県'), (46, '鹿児島'), (47, '沖縄県'), (48, '海外')], default=0, verbose_name='都道府県ID')),
                ('rank', models.IntegerField(default=0, verbose_name='ランク')),
                ('gender_rank', models.IntegerField(default=0, verbose_name='性別ランク')),
                ('generation_rank', models.IntegerField(default=0, verbose_name='世代ランク')),
                ('prefecture_rank', models.IntegerField(default=0, verbose_name='県ランク')),
            ],
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='大会ID')),
                ('type', models.SmallIntegerField(choices=[(1, 'SCJ'), (2, 'WCA')], default=0, verbose_name='大会タイプ')),
                ('name', models.CharField(max_length=64, verbose_name='大会名')),
                ('name_id', models.CharField(max_length=64, verbose_name='大会名ID')),
                ('open_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='開始日')),
                ('close_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='終了日')),
                ('registration_open_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='申し込み開始日時')),
                ('registration_close_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='申し込み終了日時')),
                ('judge_person_ids', django_mysql.models.JSONField(default=dict, verbose_name='審判員ID')),
                ('stripe_user_person_id', models.IntegerField(default=0, verbose_name='Stripe使用者ID')),
                ('event_ids', django_mysql.models.JSONField(default=dict, verbose_name='イベントID')),
                ('prefecture_id', models.SmallIntegerField(choices=[(1, '北海道'), (2, '青森県'), (3, '岩手県'), (4, '宮城県'), (5, '秋田県'), (6, '山形県'), (7, '福島県'), (8, '茨城県'), (9, '栃木県'), (10, '群馬県'), (11, '埼玉県'), (12, '千葉県'), (13, '東京都'), (14, '神奈川県'), (15, '新潟県'), (16, '富山県'), (17, '石川県'), (18, '福井県'), (19, '山梨県'), (20, '長野県'), (21, '岐阜県'), (22, '静岡県'), (23, '愛知県'), (24, '三重県'), (25, '滋賀県'), (26, '京都府'), (27, '大阪府'), (28, '兵庫県'), (29, '奈良県'), (30, '和歌山県'), (31, '鳥取県'), (32, '島根県'), (33, '岡山県'), (34, '広島県'), (35, '山口県'), (36, '徳島県'), (37, '香川県'), (38, '愛媛県'), (39, '高知県'), (40, '福岡県'), (41, '佐賀県'), (42, '長崎県'), (43, '熊本県'), (44, '大分県'), (45, '宮崎県'), (46, '鹿児島'), (47, '沖縄県'), (48, '海外')], verbose_name='都道府県ID')),
                ('organizer_person_ids', django_mysql.models.JSONField(default=dict, verbose_name='主催者SCJID')),
                ('venue_name', models.CharField(max_length=256, verbose_name='開催地名')),
                ('venue_address', models.CharField(max_length=256, verbose_name='開催地住所')),
                ('latitude', models.FloatField(verbose_name='開催地緯度')),
                ('longitude', models.FloatField(verbose_name='開催地経度')),
                ('limit', models.IntegerField(verbose_name='制限人数')),
                ('guest_limit', models.SmallIntegerField(verbose_name='ゲスト最大人数')),
                ('is_display_pending_competitor', models.BooleanField(default=False, verbose_name='承認前の競技者の一覧表示フラグ')),
                ('fee_pay_type', models.SmallIntegerField(choices=[(1, '現地支払'), (2, '事前支払または現地支払'), (3, '事前支払')], default=0, verbose_name='参加費支払いタイプ')),
                ('fee_calc_type', models.SmallIntegerField(choices=[(1, '種目別'), (2, '種目数')], default=0, verbose_name='参加費計算タイプ')),
                ('description', models.TextField(default='', verbose_name='大会説明')),
                ('requirement', models.TextField(default='', verbose_name='参加要件')),
                ('is_cancel', models.BooleanField(default=False, verbose_name='キャンセル可否')),
                ('is_payment', models.BooleanField(default=False, verbose_name='課金可否')),
            ],
        ),
        migrations.CreateModel(
            name='Competitor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition_id', models.IntegerField(verbose_name='大会ID')),
                ('status', models.SmallIntegerField(choices=[(1, 'PENDING'), (2, 'REGISTRATION'), (3, 'CANCEL')], verbose_name='状態')),
                ('event_ids', django_mysql.models.JSONField(default=dict, verbose_name='申し込み種目ID')),
                ('guest_count', models.SmallIntegerField(verbose_name='見学者数')),
                ('comment', models.TextField(verbose_name='コメント')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
        ),
        migrations.CreateModel(
            name='FeePerEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition_id', models.IntegerField(verbose_name='大会ID')),
                ('event_id', models.SmallIntegerField(choices=[(1, '3x3x3 キューブ'), (2, '2x2x2 キューブ'), (3, '4x4x4 キューブ'), (4, '5x5x5 キューブ'), (5, '6x6x6 キューブ'), (6, '7x7x7 キューブ'), (7, '3x3x3 目隠し'), (8, '3x3x3 最少手数'), (9, '3x3x3 片手'), (10, 'クロック'), (11, 'メガミンクス'), (12, 'ピラミンクス'), (13, 'スキューブ'), (14, 'スクエア1'), (15, '4x4x4 目隠し'), (16, '5x5x5 目隠し'), (17, '3x3x3 複数目隠し')], verbose_name='イベントID')),
                ('price', models.IntegerField(verbose_name='料金')),
            ],
        ),
        migrations.CreateModel(
            name='FeePerEventCount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition_id', models.IntegerField(verbose_name='大会ID')),
                ('event_count', models.SmallIntegerField(verbose_name='イベント数')),
                ('price', models.IntegerField(verbose_name='料金')),
            ],
        ),
        migrations.CreateModel(
            name='Information',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'WCA大会'), (2, 'SCJ大会'), (3, 'イベント'), (4, 'お知らせ')], verbose_name='種類')),
                ('title', models.CharField(max_length=64, verbose_name='タイトル')),
                ('text', models.TextField(verbose_name='本文')),
                ('is_public', models.BooleanField(default=False, verbose_name='公開する')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=64, verbose_name='名')),
                ('last_name', models.CharField(max_length=64, verbose_name='姓')),
                ('first_name_kana', models.CharField(max_length=64, verbose_name='メイ')),
                ('last_name_kana', models.CharField(max_length=64, verbose_name='セイ')),
                ('first_name_roma', models.CharField(max_length=64, verbose_name='名(ローマ字)')),
                ('last_name_roma', models.CharField(max_length=64, verbose_name='姓(ローマ字)')),
                ('gender', models.SmallIntegerField(choices=[(1, '男性'), (2, '女性')], verbose_name='性別')),
                ('birth_at', models.DateField(verbose_name='生年月日')),
                ('prefecture_id', models.SmallIntegerField(choices=[(1, '北海道'), (2, '青森県'), (3, '岩手県'), (4, '宮城県'), (5, '秋田県'), (6, '山形県'), (7, '福島県'), (8, '茨城県'), (9, '栃木県'), (10, '群馬県'), (11, '埼玉県'), (12, '千葉県'), (13, '東京都'), (14, '神奈川県'), (15, '新潟県'), (16, '富山県'), (17, '石川県'), (18, '福井県'), (19, '山梨県'), (20, '長野県'), (21, '岐阜県'), (22, '静岡県'), (23, '愛知県'), (24, '三重県'), (25, '滋賀県'), (26, '京都府'), (27, '大阪府'), (28, '兵庫県'), (29, '奈良県'), (30, '和歌山県'), (31, '鳥取県'), (32, '島根県'), (33, '岡山県'), (34, '広島県'), (35, '山口県'), (36, '徳島県'), (37, '香川県'), (38, '愛媛県'), (39, '高知県'), (40, '福岡県'), (41, '佐賀県'), (42, '長崎県'), (43, '熊本県'), (44, '大分県'), (45, '宮崎県'), (46, '鹿児島'), (47, '沖縄県'), (48, '海外')], verbose_name='都道府県')),
                ('wca_id', models.CharField(max_length=10, verbose_name='WCA_ID')),
                ('wca_user_id', models.IntegerField(default=0, verbose_name='WCA_USER_ID')),
                ('wca_email', models.EmailField(default='', max_length=254, verbose_name='WCA EMAIL')),
                ('wca_name', models.CharField(default='', max_length=256, verbose_name='WCA氏名')),
                ('wca_country_iso2', models.CharField(default='', max_length=2, verbose_name='WCA所属国')),
                ('wca_access_token', models.CharField(max_length=256, verbose_name='WCAアクセストークン')),
                ('wca_refresh_token', models.CharField(max_length=256, verbose_name='WCAリフレッシュトークン')),
                ('wca_avatar_url', models.CharField(max_length=256, verbose_name='アバター')),
                ('wca_avatar_thumb_url', models.CharField(max_length=256, verbose_name='アバターサムネイル')),
                ('stripe_user_id', models.CharField(default='', max_length=256, verbose_name='STRIPE_USER_ID')),
                ('is_judge', models.BooleanField(default=False, verbose_name='審判員フラグ')),
                ('is_community_posting_offer', models.BooleanField(default=False, verbose_name='宣伝申請許可')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'WCA大会'), (2, 'SCJ大会'), (3, 'イベント'), (4, 'お知らせ')], verbose_name='種類')),
                ('title', models.CharField(max_length=24, verbose_name='タイトル')),
                ('text', models.TextField(verbose_name='本文')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition_id', models.IntegerField(verbose_name='大会ID')),
                ('event_id', models.SmallIntegerField(choices=[(1, '3x3x3 キューブ'), (2, '2x2x2 キューブ'), (3, '4x4x4 キューブ'), (4, '5x5x5 キューブ'), (5, '6x6x6 キューブ'), (6, '7x7x7 キューブ'), (7, '3x3x3 目隠し'), (8, '3x3x3 最少手数'), (9, '3x3x3 片手'), (10, 'クロック'), (11, 'メガミンクス'), (12, 'ピラミンクス'), (13, 'スキューブ'), (14, 'スクエア1'), (15, '4x4x4 目隠し'), (16, '5x5x5 目隠し'), (17, '3x3x3 複数目隠し')], verbose_name='イベントID')),
                ('person_id', models.IntegerField(verbose_name='競技者ID')),
                ('rank', models.SmallIntegerField(verbose_name='順位')),
                ('best', models.FloatField(verbose_name='Best')),
                ('average', models.FloatField(verbose_name='Average')),
                ('value1', models.FloatField(verbose_name='値1')),
                ('value2', models.FloatField(verbose_name='値2')),
                ('value3', models.FloatField(verbose_name='値3')),
                ('value4', models.FloatField(verbose_name='値4')),
                ('value5', models.FloatField(verbose_name='値5')),
            ],
        ),
        migrations.CreateModel(
            name='Round',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False, verbose_name='ラウンドID')),
                ('competition_id', models.IntegerField(verbose_name='大会ID')),
                ('event_id', models.SmallIntegerField(choices=[(1, '3x3x3 キューブ'), (2, '2x2x2 キューブ'), (3, '4x4x4 キューブ'), (4, '5x5x5 キューブ'), (5, '6x6x6 キューブ'), (6, '7x7x7 キューブ'), (7, '3x3x3 目隠し'), (8, '3x3x3 最少手数'), (9, '3x3x3 片手'), (10, 'クロック'), (11, 'メガミンクス'), (12, 'ピラミンクス'), (13, 'スキューブ'), (14, 'スクエア1'), (15, '4x4x4 目隠し'), (16, '5x5x5 目隠し'), (17, '3x3x3 複数目隠し')], verbose_name='イベントID')),
                ('event_name', models.CharField(default='', max_length=64, verbose_name='イベント名')),
                ('attempt_count', models.SmallIntegerField(default=0, verbose_name='挑戦回数')),
                ('type', models.SmallIntegerField(choices=[(1, '予選'), (2, '二次予選'), (3, '準決勝'), (4, '決勝'), (5, '複合予選'), (6, '複合二次予選'), (7, '複合決勝')], verbose_name='ラウンドタイプ')),
                ('format_id', models.IntegerField(choices=[(1, 'Best of 1'), (2, 'Best of 2'), (3, 'Best of 3'), (4, 'Average of 5'), (5, 'Mean of 3')], verbose_name='フォーマットID')),
                ('limit_type', models.SmallIntegerField(choices=[(1, '時間制限'), (2, '累計時間制限')], default=0, verbose_name='制限タイプ')),
                ('limit_time', models.IntegerField(verbose_name='制限時間')),
                ('cutoff_attempt_count', models.SmallIntegerField(default=0, verbose_name='カットオフ回数')),
                ('cutoff_time', models.IntegerField(verbose_name='カットオフ時間')),
                ('proceed_count', models.IntegerField(verbose_name='通過人数')),
                ('room_name', models.CharField(default='', max_length=64, verbose_name='会場名')),
                ('begin_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='開始時刻')),
                ('end_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='終了時刻')),
            ],
        ),
        migrations.CreateModel(
            name='Scramble',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition_id', models.IntegerField(verbose_name='大会ID')),
                ('event_id', models.SmallIntegerField(choices=[(1, '3x3x3 キューブ'), (2, '2x2x2 キューブ'), (3, '4x4x4 キューブ'), (4, '5x5x5 キューブ'), (5, '6x6x6 キューブ'), (6, '7x7x7 キューブ'), (7, '3x3x3 目隠し'), (8, '3x3x3 最少手数'), (9, '3x3x3 片手'), (10, 'クロック'), (11, 'メガミンクス'), (12, 'ピラミンクス'), (13, 'スキューブ'), (14, 'スクエア1'), (15, '4x4x4 目隠し'), (16, '5x5x5 目隠し'), (17, '3x3x3 複数目隠し')], verbose_name='イベントID')),
                ('round_id', models.IntegerField(verbose_name='ラウンドID')),
                ('group_id', models.CharField(max_length=4, verbose_name='グループID')),
                ('scramble', models.CharField(max_length=64, verbose_name='スクランブル')),
            ],
        ),
        migrations.CreateModel(
            name='StripeProgress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('customer_id', models.CharField(max_length=64, verbose_name='Stripe顧客ID')),
                ('competition_id', models.IntegerField(default=0, verbose_name='大会ID')),
                ('competitor_id', models.IntegerField(default=0, verbose_name='選手ID')),
                ('charge_id', models.CharField(default='', max_length=256, verbose_name='Stripe決済ID')),
                ('pay_price', models.IntegerField(default=0, verbose_name='支払額')),
                ('refund_price', models.IntegerField(default=0, verbose_name='返金額')),
                ('pay_at', models.DateTimeField(default=None, null=True, verbose_name='支払日時')),
                ('refund_at', models.DateTimeField(default=None, null=True, verbose_name='返金日時')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='作成日時')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新日時')),
            ],
        ),
        migrations.CreateModel(
            name='WcaAverageRank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wca_id', models.CharField(max_length=10, verbose_name='WCA_ID')),
                ('event_id', models.SmallIntegerField(choices=[(1, '3x3x3 キューブ'), (2, '2x2x2 キューブ'), (3, '4x4x4 キューブ'), (4, '5x5x5 キューブ'), (5, '6x6x6 キューブ'), (6, '7x7x7 キューブ'), (7, '3x3x3 目隠し'), (8, '3x3x3 最少手数'), (9, '3x3x3 片手'), (10, 'クロック'), (11, 'メガミンクス'), (12, 'ピラミンクス'), (13, 'スキューブ'), (14, 'スクエア1'), (15, '4x4x4 目隠し'), (16, '5x5x5 目隠し'), (17, '3x3x3 複数目隠し')], verbose_name='イベントID')),
                ('best', models.IntegerField(verbose_name='ベスト')),
                ('rank', models.IntegerField(verbose_name='順位')),
            ],
        ),
        migrations.CreateModel(
            name='WcaBestRank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wca_id', models.CharField(max_length=10, verbose_name='WCA_ID')),
                ('event_id', models.SmallIntegerField(choices=[(1, '3x3x3 キューブ'), (2, '2x2x2 キューブ'), (3, '4x4x4 キューブ'), (4, '5x5x5 キューブ'), (5, '6x6x6 キューブ'), (6, '7x7x7 キューブ'), (7, '3x3x3 目隠し'), (8, '3x3x3 最少手数'), (9, '3x3x3 片手'), (10, 'クロック'), (11, 'メガミンクス'), (12, 'ピラミンクス'), (13, 'スキューブ'), (14, 'スクエア1'), (15, '4x4x4 目隠し'), (16, '5x5x5 目隠し'), (17, '3x3x3 複数目隠し')], verbose_name='イベントID')),
                ('best', models.IntegerField(verbose_name='ベスト')),
                ('rank', models.IntegerField(verbose_name='順位')),
            ],
        ),
        migrations.AddIndex(
            model_name='wcabestrank',
            index=models.Index(fields=['event_id', 'wca_id'], name='idx_event_id_wca_id'),
        ),
        migrations.AddIndex(
            model_name='wcaaveragerank',
            index=models.Index(fields=['event_id', 'wca_id'], name='idx_event_id_wca_id'),
        ),
        migrations.AddIndex(
            model_name='stripeprogress',
            index=models.Index(fields=['customer_id'], name='idx_customer_id'),
        ),
        migrations.AddIndex(
            model_name='stripeprogress',
            index=models.Index(fields=['competitor_id'], name='idx_competitor_id'),
        ),
        migrations.AddField(
            model_name='result',
            name='round',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Round'),
        ),
        migrations.AddField(
            model_name='post',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Person'),
        ),
        migrations.AddField(
            model_name='person',
            name='user',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='information',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Person'),
        ),
        migrations.AddField(
            model_name='competitor',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.Person'),
        ),
        migrations.AddIndex(
            model_name='competition',
            index=models.Index(fields=['name_id'], name='idx_name_id'),
        ),
        migrations.AddField(
            model_name='bestrank',
            name='person',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='app.Person'),
        ),
        migrations.AddField(
            model_name='averagerank',
            name='person',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='app.Person'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddIndex(
            model_name='result',
            index=models.Index(fields=['competition_id'], name='idx_competition_id'),
        ),
        migrations.AddIndex(
            model_name='competitor',
            index=models.Index(fields=['competition_id', 'person'], name='idx_competition_id_person'),
        ),
        migrations.AddIndex(
            model_name='bestrank',
            index=models.Index(fields=['person'], name='idx_person'),
        ),
        migrations.AddIndex(
            model_name='averagerank',
            index=models.Index(fields=['person'], name='idx_person'),
        ),
    ]
